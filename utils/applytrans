#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use open ':std', OUT => ':utf8';
use Encode;
use Data::Dumper;
use File::Basename qw(dirname);
use Cwd qw(cwd);
use Getopt::Long;

# Import hengband translation to .pot files.
#
# usage: utils/applytrans <path/to/hengband/lib/edit/r_info.txt> < i18n/_gamedata-monster.pot > i18n/ja_JP/LC_MESSAGES/_gamedata-monster.po

sub usage {
  die "Usage: $0 --mode=(hengband|angband_ja) [--context=<context>] <path/to/hengband/lib/edit/r_info.txt> < <i18n/_gamedata-monster.pot> > <i18n/ja_JP/LC_MESSAGES/_gamedata-monster.po>\n";
}

GetOptions(
  "mode=s" => \my $mode,
  "context=s" => \my $context,
) or usage();

unless (defined $mode && ($mode eq 'hengband' or $mode eq 'angband_ja')) {
  usage();
}

sub normalize {
    my $name = shift;
    $name =~ tr/Éáâäéëíóöúû/Eaaaeeioouu/;
    return lc $name;
}

my $gamedata_txt = shift or die;

open my $fh, '<', $gamedata_txt or die $!;

binmode $fh, {
  angband_ja => ':encoding(cp932)',
  hengband   => ':utf8',
}->{$mode};

my $version = do {
  my $cwd = cwd();
  chdir dirname($gamedata_txt) or die $!;
  my $version = qx(git describe --tags --always);
  chdir $cwd;
  chomp $version;
  $version;
};

my $source = {
  angband_ja => 'Angband 日本語版',
  hengband   => '変愚蛮怒',
}->{$mode} . " $version";

my ($name_en, $name_ja, @desc_en, @desc_ja, @comments);

my $translation = {};
my $comments = {};

while (<$fh>) {
  if ($mode eq 'hengband') {
    if (/^#J/) {
      push @comments, $_;
    } elsif (/^N:\d+:(.+)/) {
      $name_ja = $1;
    } elsif (/^E:(.+)/) {
      $name_en = $1;
    } elsif (/^J:(.+)/) {
      $name_ja = $1;
    }

    if (my ($desc) = /^D:(.+)/) {
      if ($desc =~ /^\$(.+)/) {
        push @desc_en, $1;
      } else {
        push @desc_ja, $desc;
      }
    }
  } elsif ($mode eq 'angband_ja') {
    if (/^#.*?[^[:ascii:]]/) {
      push @comments, $_;
    } elsif (/^J:N:(.+)/) {
      $name_ja = $1;
    } elsif (/^N:\d+:(.+)/) {
      $name_en = $1;
    }

    if (/^J:D:(.+)/) {
      push @desc_ja, $1;
    } elsif (/^D:(.+)/) {
      push @desc_en, $1;
    }
  } else {
    die "invalid mode $mode";
  }

  if (/^$/) {
    if ($name_en) {
      # empty line is end of entry
      warn "conflict: $name_en" if $translation->{$name_en};

      # Some files contain ':' in names for multiple entries
      # > N:1:盲目:青い
      # > E:Blindness:Blue
      my @name_en_parts = split /:/, $name_en;
      my @name_ja_parts = split /:/, $name_ja;

      die "unexpected: number of colons mismatch: '$name_en' vs '$name_ja'"
        if @name_en_parts != @name_ja_parts;

      $translation->{ normalize(join "", @desc_en) } = join "", @desc_ja;

      for my $i (0..$#name_en_parts) {
        $translation->{ normalize($name_en_parts[$i]) } = $name_ja_parts[$i];
      }

      # Comments are for first entry
      $comments->{ normalize($name_en_parts[0]) } = [ @comments ];

      undef $name_en;
      undef $name_ja;
      undef @desc_en;
      undef @desc_ja;
      undef @comments;
    } elsif (@comments) {
      $comments->{''} = [ @comments ];
    }
  }
}

printf "### Original comments from $source:\n";

for (@{ $comments->{''} || [] }) {
  print "# $_";
}

print <<'__HEADER__';

msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: ja\n"

__HEADER__

my @comment_lines;
while (<STDIN>) {
  my @msgid_lines;
  my $msgid;
  if (/^#/) {
    push @comment_lines, $_;
  } elsif (/^msgid "(.+)"$/) {
    $msgid = $1;
    push @msgid_lines, $_;
  } elsif (/^msgid ""$/) {
    $msgid = "";
    push @msgid_lines, $_;
    while (<STDIN>) {
      if (/^"(.+)"$/) {
        $msgid .= $1;
        push @msgid_lines, $_;
      } else {
        # should be a "msgstr" line
        last;
      }
    }
  } elsif (/^$/)  {
      undef @comment_lines;
  }

  if ($msgid && (my $trans = $translation->{normalize($msgid)})) {
    # Keep '#J0#' style message as msgmerge changes them to '# J0'
    printf "# From $source\n";
    print "# $_" for @{ $comments->{normalize($msgid)} || [] };
    print "$_" for @comment_lines;
    print qq(msgctxt "$context"\n) if $context;
    print $_ for @msgid_lines;
    $trans =~ s/"/\\"/g;
    print qq(msgstr "$trans"\n\n);
  }
}
