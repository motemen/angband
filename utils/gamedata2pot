#!/usr/bin/env perl
use strict;
use warnings;
use File::Spec;
use File::Spec::Functions qw(abs2rel canonpath catfile updir);
use File::Basename qw(dirname);
use Cwd qw(realpath);

# Generates a .pot file from lib/gamedata/* files.

# 'monster', 'class', ...
my $type = shift or die;

my $file = realpath(catfile(dirname(__FILE__), updir, "lib", "gamedata", "$type.txt")) or die "cannot find lib/gamedata/$type.txt";
   $file = abs2rel($file);

open my $fh, "<", $file or die "Can't open $file: $!";

my $seen = {};

sub emit_msg_entry {
    my ($msgid, $comment) = @_;

    if (ref $msgid eq 'ARRAY') {
        return if $seen->{ join "\n", @$msgid }++;

        print "#: $file:$.\n";
        print "# $comment\n" if $comment;
        print qq(msgctxt "$type"\n);
        print qq(msgid ""\n);
        for (@$msgid) {
            s/"/\\"/g;
            print qq("$_"\n);
        }
        print qq(msgstr ""\n\n);
    } else {
        return if $seen->{$msgid}++;

        print "#: $file:$.\n";
        print "# $comment\n" if $comment;
        print qq(msgctxt "$type"\n);
        print qq(msgid "$msgid"\n);
        print qq(msgstr ""\n\n);
    }
}

while (<$fh>) {
    chomp;

    if (/^name:(.+)/) {
        next if $type eq 'blow_methods';
        next if $type eq 'blow_effects';
        next if $type eq 'player_timed';
        next if $type eq 'ui_entry';

        if ($type eq 'object_base') {
            /^name:[^:]+:(.+)/ or next;
            emit_msg_entry($1);
        } elsif ($type eq 'trap') {
            my ($name, $short_desc) = /^name:([^:]+):(.+)/ or next;
            emit_msg_entry($name, "name");
            emit_msg_entry($short_desc, "short description");
        } else {
            emit_msg_entry($1);
        }
    } elsif (/^act:(.+)/) {
        next if $type eq 'artifact';
        emit_msg_entry($1);
    } elsif (/^desc:(.+)/) {
        next if $type eq 'player_timed';

        my @msgid = ($1);
        while (<$fh>) {
            if (/^desc:(.+)/) {
                push @msgid, $1;
            } else {
                last;
            }
        }

        emit_msg_entry([@msgid]);
    } elsif (/^slot:.+?:(.+)$/) {
        emit_msg_entry($1);
    } elsif (/^grade:.:\d+:([^:]+):([^:]*)(?::([^:]*))?$/) {
        my ($grade_name, $msg1, $msg2) = ($1, $2, $3);

        for ($grade_name, $msg1, $msg2) {
            next unless length $_;
            emit_msg_entry($_);
        }
    } elsif (/^(?:on-end|on-increase):(.+)$/) {
        emit_msg_entry($1);
    } elsif (/^message:(.+)$/) {
        next unless $type eq 'pain';
        emit_msg_entry($1);
    } elsif (/^title:(.+)$/) {
        emit_msg_entry($1, "title");
    } elsif (/^spell:([^:]+)/) {
        emit_msg_entry($1, "spell");
    } elsif (/^(label[0-9]?)?:([^:]+)/) {
        emit_msg_entry($2, $1);
    } elsif (/^verb:(.+)$/) {
        emit_msg_entry($1, 'verb');
    }
}
