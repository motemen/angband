#!/usr/bin/env perl
use strict;
use warnings;
use Encode;
use Data::Dumper;

# Import hengband translation to .pot files.
#
# usage: utils/applytrans <path/to/hengband/r_info.txt> < i18n/_gamedata-monster.pot > i18n/ja_JP/LC_MESSAGES/_gamedata-monster.po

my $ja_monster_txt = shift or die;

open my $fh, '<', $ja_monster_txt or die $!;

my ($name_en, $name_ja, @desc_en, @desc_ja, @comments);

my $translation = {};
my $comments = {};

while (<$fh>) {
  if (/^#J/) {
    push @comments, $_;
  } elsif (/^N:\d+:(.+)/) {
    $name_ja = $1;
  } elsif (/^E:(.+)/) {
    $name_en = $1;
  }

  if (my ($desc) = /^D:(.+)/) {
    if ($desc =~ /^\$(.+)/) {
      push @desc_en, $1;
    } else {
      push @desc_ja, $desc;
    }
  }

  if (/^$/) {
    if ($name_en) {
      # empty line is end of entry
      warn "conflict: $name_en" if $translation->{$name_en};

      # Some files contain ':' in names for multiple entries
      # > N:1:盲目:青い
      # > E:Blindness:Blue
      my @name_en_parts = split /:/, $name_en;
      my @name_ja_parts = split /:/, $name_ja;

      die "unexpected: number of colons mismatch: '$name_en' vs '$name_ja'"
        if @name_en_parts != @name_ja_parts;

      $translation->{ uc join "", @desc_en } = join "", @desc_ja;

      for my $i (0..$#name_en_parts) {
        $translation->{uc $name_en_parts[$i]} = $name_ja_parts[$i];
      }

      # Comments are for first entry
      $comments->{uc $name_en_parts[0]} = [ @comments ];

      undef $name_en;
      undef $name_ja;
      undef @desc_en;
      undef @desc_ja;
      undef @comments;
    } elsif (@comments) {
      $comments->{''} = [ @comments ];
    }
  }
}

for (@{ $comments->{''} || [] }) {
  print "$_";
}

print <<'__HEADER__';

msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"

__HEADER__

my @comment_lines;
while (<STDIN>) {
  my @msgid_lines;
  my $msgid;
  if (/^#/) {
    push @comment_lines, $_;
  } elsif (/^msgid "(.+)"$/) {
    $msgid = $1;
    push @msgid_lines, $_;
  } elsif (/^msgid ""$/) {
    $msgid = "";
    push @msgid_lines, $_;
    while (<STDIN>) {
      if (/^"(.+)"$/) {
        $msgid .= $1;
        push @msgid_lines, $_;
      } else {
        # should be a "msgstr" line
        last;
      }
    }
  } elsif (/^$/)  {
      undef @comment_lines;
  }

  if ($msgid && (my $trans = $translation->{uc $msgid})) {
    print $_ for @{ $comments->{uc $msgid} || [] };
    print $_ for @comment_lines;
    print $_ for @msgid_lines;
    $trans =~ s/"/\\"/g;
    print qq(msgstr "$trans"\n\n);
  }
}
