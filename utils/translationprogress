#!/usr/bin/env perl
use strict;
use warnings;
use List::Util qw(sum);

my %count;
my ($msgid, $msgstr, $fuzzy, @locs);
my $state;

while (<>) {
  if (/^msgid "(.*)"/) {
    $msgid = $1;
    $state = 'MSGID';
    undef $msgstr;
  } elsif (/^msgstr "(.*)"/) {
    $msgstr = $1;
    $state = 'MSGSTR';
  } elsif (/^"(.*)"/) {
    if (($state // '') eq 'MSGID') {
      $msgid .= $1;
    } elsif (($state // '') eq 'MSGSTR') {
      $msgstr .= $1;
    } else {
      if ($msgid) {
        die sprintf "got line '$_' at invalid state '%s' at line $.", $state // '(undef)';
      }
      # else nop
    }
  } else {
    if (/^#: (.+)/) {
      @locs = map { s/:[0-9]+$//; s<^(\.\./)+><>; $_ } split / /, $1;
    }
    if (/^#, fuzzy$/) {
      $fuzzy = 1;
    }

    if ($msgid) {
      while (my $loc = pop @locs) {
        $count{$loc}{$msgid} = length $msgstr && !$fuzzy ? 1 : 0;
      }
      undef $fuzzy;
    }

    undef $msgid;
    undef $msgstr;
    undef $state;
  }
}

if ($msgid) {
  while (my $loc = pop @locs) {
    $count{$loc}{$msgid} = length $msgstr ? 1 : 0;
  }
}

if (eof) {
  for my $loc (sort keys %count) {
    print "$loc\t", sum(values %{$count{$loc}}), "\t", scalar keys %{$count{$loc}}, "\n";
  }
}
